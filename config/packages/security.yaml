security:
    # https://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory:
            memory:
                users:
                    iracanyes:
                        password: $2y$12$hH2H.CVqrOyV3pLPu.RySeBJwiHHEQJ6MI0Epqft8sjZgSP34ykQ6
                        roles:  'ROLE_SUPER_ADMIN'
                    user@bien-etre.com:
                        password: $2y$12$CDhUVdecVZOsKo7ToVWELO8q4STavM0ph12lxZs/Bjz69lUcY8DoW
                        roles:  'ROLE_CLIENT'

    firewalls:
        dev:
            # _profiler(Symfony Profiler) et _wdt(Web Dev Tool)
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
        # On utilise les RegExpr pour différencier les routes
            pattern: ^/
            anonymous: ~
            # Fournisseur d'utilisateurs authentifié
            provider: in_memory
            form_login:
                # Chemin formulaire de connexion
                login_path: login
                # Chemin controller de connexion
                check_path: login
                default_target_path: profile_home
                failure_path: login
            logout:
                path: logout
                target: /

            # activate different ways to authenticate
            # http_basic permet d'afficher une fenêtre(Pop-up) de connexion basique en HTML par le navigateur.
            # http_basic: ~
            # https://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: ~
            # https://symfony.com/doc/current/cookbook/security/form_login_setup.html


    # Contrôle d'accès par le firewall
    access_control:
        # Accès à la route /admin après authentification par le firewall
        - { path: ^/profile/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/profile, roles: ROLE_MEMBER }
        - { path: ^/profile/members, roles: ROLE_CLIENT }
        - { path: ^/profile/providers, roles: ROLE_PROVIDER }
        - { path: ^/admin, roles: ROLE_SUPER_ADMIN }
    # Définir le controller à utiliser pour encoder le mot de passe.
    # Il permet aussi d'indiquer à Symfony le type d'encodage utilisé pour les mots de passe des utilisateurs authentifiés
    encoders:
        #Classe de l'encodeur et le type d'encodage effectué
        # Ex: Symfony\Component\Security\Core\User\User: plaintext
        Symfony\Component\Security\Core\User\User:
            algorithm: bcrypt
            cost: 12

    # Hiérarchie des rôles
    role_hierarchy:
      ROLE_CLIENT: ROLE_MEMBER
      ROLE_PROVIDER: ROLE_MEMBER
      ROLE_ADMIN: [ROLE_CLIENT, ROLE_PROVIDER, ROLE_ALLOWED_TO_SWITCH]
      ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
