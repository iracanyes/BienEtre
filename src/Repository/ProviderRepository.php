<?php

namespace App\Repository;

use App\Entity\Provider;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use Knp\Component\Pager\PaginatorInterface;

/**
 * ProviderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProviderRepository extends EntityRepository
{

    /**
     * Join Logos
     * @return QueryBuilder
     */
    protected function addLogo(QueryBuilder $qb):QueryBuilder
    {
        $qb->innerJoin('p.logos', 'l')
        ->addSelect('l');

        return $qb;

    }

    protected function addImages(QueryBuilder $qb):QueryBuilder
    {
        $qb->leftJoin("p.images", "i")
            ->addSelect("i");

        return $qb;
    }

    protected function addRecentServices(QueryBuilder $qb):QueryBuilder
    {
        $qb->leftJoin("p.services", "s")
            ->addSelect("s");
            //->addOrderBy("s.releaseDate","DESC");

        return $qb;
    }

    protected function addRecentServiceCategories(QueryBuilder $qb): QueryBuilder
    {
        $qb->leftJoin("p.serviceCategories","sc")
            ->addSelect("sc");
            // Aucun champ pour la date de création
            //->addOrderBy("sc.releaseDate","DESC");

        return $qb;
    }


    protected function addRecentPromotions(QueryBuilder $qb):QueryBuilder
    {
        $qb->leftJoin("p.promotions","pro")
            ->addSelect("pro")
            ->addOrderBy("pro.releaseDate","DESC");

        return $qb;
    }

    /**
     * Get All providers + logos
     */
    public function myFindAll(): Query
    {
        //Syntaxe longue
        $qb = $this->_em->createQueryBuilder()
            ->select('p')
            ->from($this->_entityName, 'p')
            ->innerJoin('p.logos', 'l')
            ->addSelect('l')
            ->orderBy('p.registryDate','DESC');

        return $qb->getQuery();

    }

    /**
     * @param string $token
     * @return array
     */
    public function myFindOneByToken(string $token):array
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('p')
            ->from($this->_entityName, 'p');

        $qb->andWhere($qb->expr()->like("p.token",":token"))
            ->setParameter("token",$token);

        $qb->innerJoin('p.logos', 'l')
            ->addSelect('l');
        $qb->leftJoin("p.services", "s")
            ->addSelect("s");
        $qb->leftJoin("p.serviceCategories","sc")
            ->addSelect("sc");
        $qb->leftJoin("p.images", "i")
            ->addSelect("i");
        $qb->leftJoin("p.promotions","pro")
            ->addSelect("pro")
            ->addOrderBy("pro.releaseDate","DESC");

        return $qb->getQuery()->getResult();

    }
    /**
     * Get Best Providers
     *
     * @return array
     */
    public function mostFans(int $limit){

        $qb = $this->_em->createQueryBuilder()
            ->select('p')
            ->from($this->_entityName,'p');

        /* Utilisation de la fonction d'ajout des entités logos
            //->innerJoin('p.logos','l')
            //->addSelect('l')
        */
        $this->addLogo($qb);

        $qb->orderBy('p.totalFans','DESC')
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get Recent Providers
     *
     * @return array
     */
    public function recentProviders(int $limit):array
    {
        // Syntaxe courte
        $qb = $this->createQueryBuilder('p');

        $this->addLogo($qb);

        $qb->orderBy('p.registryDate','DESC')
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    /**
     * Search by Provider (locality,postalCode,township)
     *
     * @param array $criteria
     * @return array
     */
    public function searchBy(array $criteria):array
    {
        $qb = $this->_em->createQueryBuilder("p");

        $qb->innerJoin('p.logos', 'l')
            ->addSelect('l');
        $qb->innerJoin('p.serviceCategories', 'sc')
            ->addSelect('sc');

        $qb->innerJoin('p.locality', 'loc')
            ->addSelect('loc');

        $qb->innerJoin('p.postalCode', 'pc')
            ->addSelect('pc');
        $qb->innerJoin('p.township', 't')
            ->addSelect('t');

        if(!empty($criteria['locality']) || !empty($criteria['postalCode']) || !empty($criteria['township'])){
            foreach ($criteria as $key=>$value){

                if(is_string($value)){

                    $qb->andWhere($qb->expr()->like("p.".$key, ":".$key))
                        ->setParameter($key, $value);

                }

                if($key === "postalCode" && is_int($value)){

                    $qb->andWhere($qb->expr()->eq("p.".$key, ":".$key))
                        ->setParameter($key, $value);
                }
            }
        }

        return $qb->getQuery()->getResult();
    }

    public function getCategories(int $id): array
    {
        $qb = $this->_em->createQueryBuilder()
            ->select("p")
            ->from($this->_entityName,"p");

        $qb->innerJoin("p.serviceCategories", "sc")
            ->addSelect("sc")
            ->innerJoin("sc.image","i")
            ->addSelect("i")
            ->where($qb->expr()->eq("p.id", ":id"))
            ->setParameter("id", $id);

        return $qb->getQuery()->getResult();

    }
}
