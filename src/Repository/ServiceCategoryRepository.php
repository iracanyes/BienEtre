<?php

namespace App\Repository;

/**
 * ServiceCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\ORM\EntityRepository;

class ServiceCategoryRepository extends EntityRepository
{
    /**
     * @param int $max
     * @return array
     */
    public function getServiceCategoriesAndProviders(int $max = 20): array
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('sc')
            ->from($this->_entityName, 'sc')
            ->innerJoin('sc.providers','p')
            ->addSelect('p')
            // MaxResult prend en compte les sous-éléments dans le comptage des éléments à retourner
            //   Ex: Si A a 10 sous-objets et 2 a 10 sous-objets alors MaxResults retourne A si max = 10
            ->setMaxResults($max);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param int $id
     * @return array
     */
    public function findByProviderId(int $id): array
    {
        $qb = $this->_em->createQueryBuilder()
            ->select("sc")
            ->from($this->_entityName, "sc")
            ->leftJoin("sc.providers","p")
            ->addSelect("p");

        $qb->andWhere($qb->expr()->eq("p.id", ":id"))
            ->setParameter("id", $id);

        dump($qb);
        dump($qb->getQuery()->getResult());
        return $qb->getQuery()->getResult();
    }

    public function countByProviderId(int $id): int
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select($qb->expr()->count("sc"))
            ->from($this->_entityName, "sc")
            ->innerJoin("sc.providers","p");

        $qb->andWhere($qb->expr()->eq("p.id", ":id"))
            ->setParameter("id", $id);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
