<?php

namespace App\Repository;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends \Doctrine\ORM\EntityRepository
{
    public function findPendingByProviderId(int $id){
        $qb = $this->_em->createQueryBuilder()
            ->select("s")
            ->from($this->_entityName, "s");

        $qb->innerJoin("s.provider", "p")
            ->addSelect("p")
            ->where($qb->expr()->eq("p.id",":id"))
            ->andWhere($qb->expr()->gte("s.releaseDate", ":date"))
            ->setParameters(array("id"=> $id, "date"=> new \DateTime()));

        return $qb->getQuery()->getResult();
    }

    public function findOngoingByProviderId(int $id){
        $qb = $this->_em->createQueryBuilder()
            ->select("s")
            ->from($this->_entityName, "s");

        $qb->innerJoin("s.provider", "p")
            ->addSelect("p")
            ->where($qb->expr()->eq("p.id",":id"))
            ->andWhere($qb->expr()->gte("s.endDate", ":date"))
            ->andWhere($qb->expr()->lte("s.startDate", ":date"))
            ->setParameters(array("id"=> $id, "date"=> new \DateTime()));

        return $qb->getQuery()->getResult();
    }

    /**
     * @param int $id
     * @return array|mixed
     */
    public function findExpiredByProviderId(int $id){
        $qb = $this->_em->createQueryBuilder()
            ->select("s")
            ->from($this->_entityName, "s");

        $qb->innerJoin("s.provider", "p")
            ->addSelect("p")
            ->where($qb->expr()->eq("p.id",":id"))
            ->andWhere($qb->expr()->lte("s.expiryDate", ":date"))
            ->setParameters(array("id"=> $id, "date"=> new \DateTime()));

        return $qb->getQuery()->getResult();
    }


    /**
     * @param int $id
     * @return array|mixed
     */
    public function findByProviderId(int $id)
    {
        $qb = $this->_em->createQueryBuilder()
            ->select("s")
            ->from($this->_entityName, "s");

        $qb->innerJoin("s.provider","p")
            ->addSelect("p")
            ->andWhere($qb->expr()->eq("p.id", ":id"))
            ->setParameter("id", $id);

        return $qb->getQuery()->getResult();
    }

    /**
     * Join Provider & Logo
     */
    protected function addProviderAndLogos($qb)
    {
        $qb->innerJoin("s.provider", "p")
            ->addSelect("p")
            ->innerJoin("p.logos", "l")
            ->addSelect("l");

        return $qb;
    }

    /**
     * Get All with associated providers & images
     */
    public function myFindAll(): array
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('s')
            ->from($this->_entityName, 's')
            ->innerJoin('s.provider', 'p')
            ->addSelect('p')
            ->innerJoin('p.logos','l')
            ->addSelect('l')
            ->orderBy('s.releaseDate','DESC');

        return $qb->getQuery()
            ->getResult();
    }

    /**
     * Get Recent Services
     * @return array
     */
    public function recentServices(): array
    {
        $qb = $this->createQueryBuilder("s");

        $this->addProviderAndLogos($qb);

        $qb->orderBy('s.releaseDate','DESC')
            ->setMaxResults(10);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param int $id
     * @return array
     */
    public function recentServicesByProviderId(int $id):array
    {
        $qb = $this->createQueryBuilder("s")
            ->orderBy("s.releaseDate","DESC");


        $qb->innerJoin("s.provider","p") // Ici on ajoute le provider, on a juste besoin de son id
        ->andWhere($qb->expr()->like("p.id", ":id"))
        ->setParameter("id", $id)
        ->setMaxResults(5);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param array $criteria
     * @return array
     */
    public function searchBy(array $criteria): array
    {
        $qb = $this->_em->createQueryBuilder()
            ->select("s")
            ->from($this->_entityName, "s");

        $qb->innerJoin("s.provider", "p")
            ->addSelect("p")
            ->innerJoin("p.logos", "l")
            ->addSelect("l");

        $qb->innerJoin('p.locality','loc')
            ->addSelect("l")
            ->innerJoin('p.postalCode', 'pc')
            ->addSelect("pc")
            ->innerJoin('p.township','t')
            ->addSelect("t  ");

        /* Exemple d'ajout de critÃ¨re de recherche
        if($locality) {
            $qb->andWhere($qb->expr()->like('p.locality',':locality'))
                ->setParameter('locality', $locality);
        }
        */
        if(!empty($criteria['locality']) || !empty($criteria['postalCode']) || !empty($criteria['township'])){
            foreach ($criteria as $key=>$value){

                if(is_string($value)){

                    $qb->andWhere($qb->expr()->like("p.".$key, ":".$key))
                        ->setParameter($key, $value);

                }

                if($key === "postalCode" && is_int($value)){

                    $qb->andWhere($qb->expr()->eq("p.".$key, ":".$key))
                        ->setParameter($key, $value);
                }
            }
        }
        return $qb->getQuery()->getResult();

    }



}

